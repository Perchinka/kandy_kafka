\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kn}{from} \PYG{n+nn}{abc} \PYG{k+kn}{import} \PYG{n}{ABC}\PYG{p}{,} \PYG{n}{abstractmethod}
\PYG{k+kn}{import} \PYG{n+nn}{logging}
\PYG{k+kn}{import} \PYG{n+nn}{confluent\PYGZus{}kafka}
\PYG{k+kn}{from} \PYG{n+nn}{confluent\PYGZus{}kafka.admin} \PYG{k+kn}{import} \PYG{n}{AdminClient}\PYG{p}{,} \PYG{n}{TopicDescription}
\PYG{k+kn}{from} \PYG{n+nn}{confluent\PYGZus{}kafka} \PYG{k+kn}{import} \PYG{p}{(}
    \PYG{n}{Consumer}\PYG{p}{,}
    \PYG{n}{KafkaError}\PYG{p}{,}
    \PYG{n}{Message}\PYG{p}{,}
    \PYG{n}{TopicCollection}\PYG{p}{,}
    \PYG{n}{TopicPartition}\PYG{p}{,}
\PYG{p}{)}
\PYG{k+kn}{from} \PYG{n+nn}{typing} \PYG{k+kn}{import} \PYG{n}{List}
\PYG{k+kn}{from} \PYG{n+nn}{kandy\PYGZus{}kafka.domain.models} \PYG{k+kn}{import} \PYG{n}{KafkaMessage}\PYG{p}{,} \PYG{n}{Topic}\PYG{p}{,} \PYG{n}{Partition}


\PYG{k}{class} \PYG{n+nc}{AbstractKafkaClusterAdapter}\PYG{p}{(}\PYG{n}{ABC}\PYG{p}{):}
\PYG{+w}{    }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Abstract base class for Kafka cluster adapters.}

\PYG{l+s+sd}{    Defines the interface for interacting with a Kafka cluster, including fetching topics}
\PYG{l+s+sd}{    and retrieving messages from a given topic.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}

    \PYG{n+nd}{@abstractmethod}
    \PYG{k}{def} \PYG{n+nf}{get\PYGZus{}topics}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{List}\PYG{p}{[}\PYG{n}{Topic}\PYG{p}{]:}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Retrieve a list of topics in the Kafka cluster.}

\PYG{l+s+sd}{        Returns:}
\PYG{l+s+sd}{            List[Topic]: A list of Topic objects representing the available topics in the cluster.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{k}{raise} \PYG{n+ne}{NotImplementedError}

    \PYG{n+nd}{@abstractmethod}
    \PYG{k}{def} \PYG{n+nf}{get\PYGZus{}messages}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{topic\PYGZus{}name}\PYG{p}{:} \PYG{n+nb}{str}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{List}\PYG{p}{[}\PYG{n}{KafkaMessage}\PYG{p}{]:}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Retrieve messages from a specified Kafka topic.}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            topic\PYGZus{}name (str): The name of the Kafka topic to fetch messages from.}

\PYG{l+s+sd}{        Returns:}
\PYG{l+s+sd}{            List[KafkaMessage]: A list of KafkaMessage objects representing the retrieved messages.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{k}{raise} \PYG{n+ne}{NotImplementedError}


\PYG{k}{class} \PYG{n+nc}{KafkaAdapter}\PYG{p}{(}\PYG{n}{AbstractKafkaClusterAdapter}\PYG{p}{):}
\PYG{+w}{    }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Kafka adapter that implements the methods to interact with a Kafka cluster using confluent\PYGZhy{}kafka library.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}

    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{host}\PYG{p}{:} \PYG{n+nb}{str}\PYG{p}{,} \PYG{n}{port}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{):}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Initializes the Kafka adapter with the given host and port.}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            host (str): The hostname or IP address of the Kafka broker.}
\PYG{l+s+sd}{            port (int): The port number of the Kafka broker.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{admin\PYGZus{}client} \PYG{o}{=} \PYG{n}{AdminClient}\PYG{p}{(\PYGZob{}}\PYG{l+s+s2}{\PYGZdq{}bootstrap.servers\PYGZdq{}}\PYG{p}{:} \PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{host}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{port}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{\PYGZcb{})}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{consumer}\PYG{p}{:} \PYG{n}{Consumer} \PYG{o}{=} \PYG{n}{Consumer}\PYG{p}{(}
            \PYG{p}{\PYGZob{}}
                \PYG{l+s+s2}{\PYGZdq{}bootstrap.servers\PYGZdq{}}\PYG{p}{:} \PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{host}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{port}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{,}
                \PYG{l+s+s2}{\PYGZdq{}group.id\PYGZdq{}}\PYG{p}{:} \PYG{l+s+s2}{\PYGZdq{}kandy\PYGZdq{}}\PYG{p}{,}  \PYG{c+c1}{\PYGZsh{} Group ID used to identify the consumer group}
                \PYG{l+s+s2}{\PYGZdq{}auto.offset.reset\PYGZdq{}}\PYG{p}{:} \PYG{l+s+s2}{\PYGZdq{}earliest\PYGZdq{}}\PYG{p}{,}  \PYG{c+c1}{\PYGZsh{} Start reading from the earliest offset (Default setting)}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{)}

    \PYG{k}{def} \PYG{n+nf}{get\PYGZus{}topics}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{List}\PYG{p}{[}\PYG{n}{Topic}\PYG{p}{]:}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Retrieve a list of topics in the Kafka cluster.}

\PYG{l+s+sd}{        Returns:}
\PYG{l+s+sd}{            List[Topic]: A list of Topic objects, each containing details about the topic and its partitions.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}

        \PYG{c+c1}{\PYGZsh{} Retrieve metadata for all topics in the Kafka cluster}
        \PYG{n}{metadata} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{admin\PYGZus{}client}\PYG{o}{.}\PYG{n}{list\PYGZus{}topics}\PYG{p}{(}\PYG{n}{timeout}\PYG{o}{=}\PYG{l+m+mi}{10}\PYG{p}{)}

        \PYG{c+c1}{\PYGZsh{} Describe each topic in the collection of topics}
        \PYG{n}{topics} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{admin\PYGZus{}client}\PYG{o}{.}\PYG{n}{describe\PYGZus{}topics}\PYG{p}{(}
            \PYG{n}{TopicCollection}\PYG{p}{(}\PYG{n+nb}{list}\PYG{p}{(}\PYG{n}{metadata}\PYG{o}{.}\PYG{n}{topics}\PYG{p}{))}
        \PYG{p}{)}

        \PYG{c+c1}{\PYGZsh{} Iterate over the topics and gather details for each}
        \PYG{n}{result} \PYG{o}{=} \PYG{p}{[]}
        \PYG{k}{for} \PYG{n}{\PYGZus{}}\PYG{p}{,} \PYG{n}{feature} \PYG{o+ow}{in} \PYG{n}{topics}\PYG{o}{.}\PYG{n}{items}\PYG{p}{():}
            \PYG{n}{topic}\PYG{p}{:} \PYG{n}{TopicDescription} \PYG{o}{=} \PYG{n}{feature}\PYG{o}{.}\PYG{n}{result}\PYG{p}{()}
            \PYG{n}{total\PYGZus{}messages} \PYG{o}{=} \PYG{l+m+mi}{0}

            \PYG{c+c1}{\PYGZsh{} Retrieve partition details for the current topic}
            \PYG{n}{partitions}\PYG{p}{:} \PYG{n}{List}\PYG{p}{[}\PYG{n}{Partition}\PYG{p}{]} \PYG{o}{=} \PYG{p}{[]}
            \PYG{k}{for} \PYG{n}{partition\PYGZus{}metadata} \PYG{o+ow}{in} \PYG{n}{topic}\PYG{o}{.}\PYG{n}{partitions}\PYG{p}{:}
                \PYG{n}{partition} \PYG{o}{=} \PYG{n}{Partition}\PYG{p}{(}\PYG{n}{topic\PYGZus{}name}\PYG{o}{=}\PYG{n}{topic}\PYG{o}{.}\PYG{n}{name}\PYG{p}{,} \PYG{n+nb}{id}\PYG{o}{=}\PYG{n}{partition\PYGZus{}metadata}\PYG{o}{.}\PYG{n}{id}\PYG{p}{)}
                \PYG{n}{partitions}\PYG{o}{.}\PYG{n}{append}\PYG{p}{(}\PYG{n}{partition}\PYG{p}{)}

                \PYG{c+c1}{\PYGZsh{} Get partition by id}
                \PYG{n}{topic\PYGZus{}partition} \PYG{o}{=} \PYG{n}{confluent\PYGZus{}kafka}\PYG{o}{.}\PYG{n}{TopicPartition}\PYG{p}{(}
                    \PYG{n}{topic}\PYG{o}{.}\PYG{n}{name}\PYG{p}{,} \PYG{n}{partition\PYGZus{}metadata}\PYG{o}{.}\PYG{n}{id}
                \PYG{p}{)}

                \PYG{c+c1}{\PYGZsh{} Amount\PYGZus{}of\PYGZus{}messages in the topic is the difference between the latest offset and the earliest one}
                \PYG{n}{low}\PYG{p}{,} \PYG{n}{high} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{consumer}\PYG{o}{.}\PYG{n}{get\PYGZus{}watermark\PYGZus{}offsets}\PYG{p}{(}\PYG{n}{topic\PYGZus{}partition}\PYG{p}{)}
                \PYG{n}{partition\PYGZus{}message\PYGZus{}count} \PYG{o}{=} \PYG{n}{high} \PYG{o}{\PYGZhy{}} \PYG{n}{low}
                \PYG{n}{total\PYGZus{}messages} \PYG{o}{+=} \PYG{n}{partition\PYGZus{}message\PYGZus{}count}

            \PYG{n}{result}\PYG{o}{.}\PYG{n}{append}\PYG{p}{(}
                \PYG{n}{Topic}\PYG{p}{(}
                    \PYG{n+nb}{id}\PYG{o}{=}\PYG{n}{topic}\PYG{o}{.}\PYG{n}{topic\PYGZus{}id}\PYG{p}{,}
                    \PYG{n}{name}\PYG{o}{=}\PYG{n}{topic}\PYG{o}{.}\PYG{n}{name}\PYG{p}{,}
                    \PYG{n}{is\PYGZus{}internal}\PYG{o}{=}\PYG{n}{topic}\PYG{o}{.}\PYG{n}{is\PYGZus{}internal}\PYG{p}{,}
                    \PYG{n}{partitions}\PYG{o}{=}\PYG{n}{partitions}\PYG{p}{,}
                    \PYG{n}{amount\PYGZus{}of\PYGZus{}messages}\PYG{o}{=}\PYG{n}{total\PYGZus{}messages}\PYG{p}{,}
                \PYG{p}{)}
            \PYG{p}{)}

        \PYG{k}{return} \PYG{n}{result}

    \PYG{k}{def} \PYG{n+nf}{get\PYGZus{}messages}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{topic\PYGZus{}name}\PYG{p}{:} \PYG{n+nb}{str}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{List}\PYG{p}{[}\PYG{n}{KafkaMessage}\PYG{p}{]:}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Fetches messages from the specified Kafka topic (from all partitions so far)}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            topic\PYGZus{}name (str): The name of the Kafka topic to fetch messages from.}

\PYG{l+s+sd}{        Returns:}
\PYG{l+s+sd}{            List[KafkaMessage]: A list of KafkaMessage objects representing the consumed messages.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n}{running} \PYG{o}{=} \PYG{k+kc}{True}
        \PYG{n}{messages}\PYG{p}{:} \PYG{n}{List}\PYG{p}{[}\PYG{n}{Message}\PYG{p}{]} \PYG{o}{=} \PYG{p}{[]}

        \PYG{c+c1}{\PYGZsh{} Callback for handling partition assignment, setting the offset to the beginning}
        \PYG{k}{def} \PYG{n+nf}{on\PYGZus{}assign}\PYG{p}{(}\PYG{n}{consumer}\PYG{p}{:} \PYG{n}{Consumer}\PYG{p}{,} \PYG{n}{partitions}\PYG{p}{:} \PYG{n}{List}\PYG{p}{[}\PYG{n}{TopicPartition}\PYG{p}{]):}
            \PYG{k}{for} \PYG{n}{partition} \PYG{o+ow}{in} \PYG{n}{partitions}\PYG{p}{:}
                \PYG{n}{partition}\PYG{o}{.}\PYG{n}{offset} \PYG{o}{=} \PYG{n}{confluent\PYGZus{}kafka}\PYG{o}{.}\PYG{n}{OFFSET\PYGZus{}BEGINNING}
            \PYG{n}{consumer}\PYG{o}{.}\PYG{n}{assign}\PYG{p}{(}\PYG{n}{partitions}\PYG{p}{)}

        \PYG{n}{logging}\PYG{o}{.}\PYG{n}{info}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Start polling messages\PYGZdq{}}\PYG{p}{)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{consumer}\PYG{o}{.}\PYG{n}{subscribe}\PYG{p}{([}\PYG{n}{topic\PYGZus{}name}\PYG{p}{],} \PYG{n}{on\PYGZus{}assign}\PYG{o}{=}\PYG{n}{on\PYGZus{}assign}\PYG{p}{)}

        \PYG{c+c1}{\PYGZsh{} Get the number of partitions for this topic}
        \PYG{n}{topic\PYGZus{}partitions} \PYG{o}{=} \PYG{p}{(}
            \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{admin\PYGZus{}client}\PYG{o}{.}\PYG{n}{list\PYGZus{}topics}\PYG{p}{(}\PYG{n}{timeout}\PYG{o}{=}\PYG{l+m+mi}{10}\PYG{p}{)}\PYG{o}{.}\PYG{n}{topics}\PYG{p}{[}\PYG{n}{topic\PYGZus{}name}\PYG{p}{]}\PYG{o}{.}\PYG{n}{partitions}
        \PYG{p}{)}

        \PYG{c+c1}{\PYGZsh{} Dictionary to track offsets for each partition (Needed to spot the end of the topic)}
        \PYG{n}{partition\PYGZus{}offsets} \PYG{o}{=} \PYG{p}{\PYGZob{}}
            \PYG{n}{partition}\PYG{p}{:} \PYG{p}{\PYGZob{}}\PYG{l+s+s2}{\PYGZdq{}low\PYGZdq{}}\PYG{p}{:} \PYG{k+kc}{None}\PYG{p}{,} \PYG{l+s+s2}{\PYGZdq{}high\PYGZdq{}}\PYG{p}{:} \PYG{k+kc}{None}\PYG{p}{,} \PYG{l+s+s2}{\PYGZdq{}current\PYGZdq{}}\PYG{p}{:} \PYG{l+m+mi}{0}\PYG{p}{\PYGZcb{}}
            \PYG{k}{for} \PYG{n}{partition} \PYG{o+ow}{in} \PYG{n}{topic\PYGZus{}partitions}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{\PYGZsh{} Fetch watermark offsets for each partition to find start and end offsets}
        \PYG{k}{for} \PYG{n}{partition\PYGZus{}id} \PYG{o+ow}{in} \PYG{n}{partition\PYGZus{}offsets}\PYG{o}{.}\PYG{n}{keys}\PYG{p}{():}
            \PYG{n}{tp} \PYG{o}{=} \PYG{n}{confluent\PYGZus{}kafka}\PYG{o}{.}\PYG{n}{TopicPartition}\PYG{p}{(}\PYG{n}{topic\PYGZus{}name}\PYG{p}{,} \PYG{n}{partition\PYGZus{}id}\PYG{p}{)}
            \PYG{n}{low}\PYG{p}{,} \PYG{n}{high} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{consumer}\PYG{o}{.}\PYG{n}{get\PYGZus{}watermark\PYGZus{}offsets}\PYG{p}{(}\PYG{n}{tp}\PYG{p}{)}
            \PYG{n}{partition\PYGZus{}offsets}\PYG{p}{[}\PYG{n}{partition\PYGZus{}id}\PYG{p}{][}\PYG{l+s+s2}{\PYGZdq{}low\PYGZdq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{low}
            \PYG{n}{partition\PYGZus{}offsets}\PYG{p}{[}\PYG{n}{partition\PYGZus{}id}\PYG{p}{][}\PYG{l+s+s2}{\PYGZdq{}high\PYGZdq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{high}
            \PYG{n}{logging}\PYG{o}{.}\PYG{n}{info}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Partition }\PYG{l+s+si}{\PYGZpc{}d}\PYG{l+s+s2}{: Low: }\PYG{l+s+si}{\PYGZpc{}d}\PYG{l+s+s2}{, High: }\PYG{l+s+si}{\PYGZpc{}d}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{,} \PYG{n}{partition\PYGZus{}id}\PYG{p}{,} \PYG{n}{low}\PYG{p}{,} \PYG{n}{high}\PYG{p}{)}

        \PYG{c+c1}{\PYGZsh{} Polling cycle}
        \PYG{k}{while} \PYG{n}{running}\PYG{p}{:}
            \PYG{n}{msg} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{consumer}\PYG{o}{.}\PYG{n}{poll}\PYG{p}{(}\PYG{n}{timeout}\PYG{o}{=}\PYG{l+m+mf}{0.1}\PYG{p}{)}

            \PYG{k}{if} \PYG{n}{msg} \PYG{o+ow}{is} \PYG{k+kc}{None}\PYG{p}{:}
                \PYG{c+c1}{\PYGZsh{} Check if all partitions have been fully consumed}
                \PYG{n}{all\PYGZus{}done} \PYG{o}{=} \PYG{n+nb}{all}\PYG{p}{(}
                    \PYG{p}{(}
                        \PYG{n}{partition\PYGZus{}offsets}\PYG{p}{[}\PYG{n}{partition}\PYG{p}{][}\PYG{l+s+s2}{\PYGZdq{}current\PYGZdq{}}\PYG{p}{]}
                        \PYG{o}{\PYGZgt{}=} \PYG{n}{partition\PYGZus{}offsets}\PYG{p}{[}\PYG{n}{partition}\PYG{p}{][}\PYG{l+s+s2}{\PYGZdq{}high\PYGZdq{}}\PYG{p}{]} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}
                    \PYG{p}{)}
                    \PYG{k}{for} \PYG{n}{partition} \PYG{o+ow}{in} \PYG{n}{partition\PYGZus{}offsets}
                \PYG{p}{)}
                \PYG{k}{if} \PYG{n}{all\PYGZus{}done}\PYG{p}{:}
                    \PYG{n}{logging}\PYG{o}{.}\PYG{n}{info}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}All partitions have been fully consumed. Stopping.\PYGZdq{}}\PYG{p}{)}
                    \PYG{n}{running} \PYG{o}{=} \PYG{k+kc}{False}
                \PYG{k}{continue}

            \PYG{k}{if} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{error}\PYG{p}{()} \PYG{o+ow}{and} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{error}\PYG{p}{()}\PYG{o}{.}\PYG{n}{code}\PYG{p}{()} \PYG{o}{!=} \PYG{n}{KafkaError}\PYG{o}{.}\PYG{n}{\PYGZus{}NO\PYGZus{}ERROR}\PYG{p}{:}
                \PYG{c+c1}{\PYGZsh{} Log errors but continue to consume from other partitions}
                \PYG{n}{logging}\PYG{o}{.}\PYG{n}{error}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Kafka error: }\PYG{l+s+si}{\PYGZpc{}s}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{,} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{error}\PYG{p}{())}
                \PYG{k}{continue}

            \PYG{c+c1}{\PYGZsh{} Record the current offset for the partition}
            \PYG{n}{partition\PYGZus{}id} \PYG{o}{=} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{partition}\PYG{p}{()}
            \PYG{n}{partition\PYGZus{}offsets}\PYG{p}{[}\PYG{n}{partition\PYGZus{}id}\PYG{p}{][}\PYG{l+s+s2}{\PYGZdq{}current\PYGZdq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{msg}\PYG{o}{.}\PYG{n}{offset}\PYG{p}{()}

            \PYG{n}{messages}\PYG{o}{.}\PYG{n}{append}\PYG{p}{(}
                \PYG{n}{KafkaMessage}\PYG{p}{(}
                    \PYG{n}{topic}\PYG{o}{=}\PYG{n}{topic\PYGZus{}name}\PYG{p}{,}
                    \PYG{n}{offset}\PYG{o}{=}\PYG{n}{msg}\PYG{o}{.}\PYG{n}{offset}\PYG{p}{(),}
                    \PYG{n}{partition\PYGZus{}id}\PYG{o}{=}\PYG{n}{msg}\PYG{o}{.}\PYG{n}{partition}\PYG{p}{(),}
                    \PYG{n}{headers}\PYG{o}{=}\PYG{n}{msg}\PYG{o}{.}\PYG{n}{headers}\PYG{p}{(),}
                    \PYG{n}{value}\PYG{o}{=}\PYG{n}{msg}\PYG{o}{.}\PYG{n}{value}\PYG{p}{(),}
                    \PYG{n}{key}\PYG{o}{=}\PYG{n}{msg}\PYG{o}{.}\PYG{n}{key}\PYG{p}{(),}
                \PYG{p}{)}
            \PYG{p}{)}

            \PYG{n}{logging}\PYG{o}{.}\PYG{n}{info}\PYG{p}{(}
                \PYG{l+s+s2}{\PYGZdq{}Message consumed from partition }\PYG{l+s+si}{\PYGZpc{}s}\PYG{l+s+s2}{: offset: }\PYG{l+s+si}{\PYGZpc{}d}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{,}
                \PYG{n}{partition\PYGZus{}id}\PYG{p}{,}
                \PYG{n}{msg}\PYG{o}{.}\PYG{n}{offset}\PYG{p}{(),}
            \PYG{p}{)}

            \PYG{c+c1}{\PYGZsh{} Stop after consuming a certain predefined number of messages}
            \PYG{c+c1}{\PYGZsh{} TODO replace with variable or config const}
            \PYG{k}{if} \PYG{n+nb}{len}\PYG{p}{(}\PYG{n}{messages}\PYG{p}{)} \PYG{o}{\PYGZgt{}=} \PYG{l+m+mi}{50}\PYG{p}{:}
                \PYG{n}{logging}\PYG{o}{.}\PYG{n}{info}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}Reached limit of 50 messages. Stopping.\PYGZdq{}}\PYG{p}{)}
                \PYG{n}{running} \PYG{o}{=} \PYG{k+kc}{False}
                \PYG{k}{continue}

        \PYG{n}{logging}\PYG{o}{.}\PYG{n}{info}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}End polling messages for topic: }\PYG{l+s+si}{\PYGZpc{}s}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{,} \PYG{n}{topic\PYGZus{}name}\PYG{p}{)}
        \PYG{k}{return} \PYG{n}{messages}
\end{Verbatim}
