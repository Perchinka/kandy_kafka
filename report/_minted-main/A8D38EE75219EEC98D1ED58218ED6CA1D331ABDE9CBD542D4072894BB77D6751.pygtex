\begin{Verbatim}[commandchars=\\\{\}]
\PYG{g+gh}{\PYGZsh{} Kandy}

\PYG{g+gu}{\PYGZsh{}\PYGZsh{} Overview}

Kandy is a powerful Command Line Interface (CLI) tool designed to streamline the management of Kafka clusters directly from your terminal. It allows you to connect to and manage Kafka clusters effortlessly, making it an indispensable tool for developers and system administrators working with Apache Kafka.

\PYG{g+gu}{\PYGZsh{}\PYGZsh{} Installation}

\PYG{g+gu}{\PYGZsh{}\PYGZsh{}\PYGZsh{} Prerequisites}

Before installing Kandy, ensure you have the following prerequisites installed on your system:

\PYG{k}{\PYGZhy{}}\PYG{+w}{ }\PYG{g+gs}{**Python 3.11**}
\PYG{k}{\PYGZhy{}}\PYG{+w}{ }\PYG{g+gs}{**Poetry**} (Python dependency management and packaging tool)
\PYG{k}{\PYGZhy{}}\PYG{+w}{ }\PYG{g+gs}{**Make**} (Build automation tool)

\PYG{g+gu}{\PYGZsh{}\PYGZsh{}\PYGZsh{} Install from Git Repository}

To install Kandy from the git repository, execute the following commands:

\PYG{l+s+sb}{```bash}
git\PYG{+w}{ }clone\PYG{+w}{ }https://github.com/Perchinka/kandy\PYGZus{}kafka.git
\PYG{n+nb}{cd}\PYG{+w}{ }kandy\PYGZus{}kafka
make\PYG{+w}{ }install
\PYG{l+s+sb}{```}

\PYG{k}{\PYGZgt{} }\PYG{g+ge}{Note: In the future, Kandy will be available via pip and other package managers for easier installation.}

The installation script will create a configuration file at \PYG{l+s+sb}{`.config/kandy/hosts.yaml`} with default connection parameters (localhost:29092). You can add new configurations to this file using the following syntax:

\PYG{l+s+sb}{```yaml}
\PYG{n+nt}{alias}\PYG{p}{:}
\PYG{+w}{    }\PYG{n+nt}{host}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{host (str)}
\PYG{+w}{    }\PYG{n+nt}{port}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{port (int)}
\PYG{l+s+sb}{```}

\PYG{g+gu}{\PYGZsh{}\PYGZsh{} Usage}
To begin using Kandy, you can display the help message by running:

\PYG{l+s+sb}{```bash}
\PYGZgt{}\PYG{+w}{ }python3\PYG{+w}{ }kandy.py\PYG{+w}{ }\PYGZhy{}h
usage:\PYG{+w}{ }kandy.py\PYG{+w}{ }\PYG{o}{[}\PYGZhy{}h\PYG{o}{]}\PYG{+w}{ }\PYG{o}{[}\PYGZhy{}\PYGZhy{}host\PYG{+w}{ }HOST\PYG{o}{]}\PYG{+w}{ }\PYG{o}{[}\PYGZhy{}\PYGZhy{}port\PYG{+w}{ }PORT\PYG{o}{]}\PYG{+w}{ }\PYG{o}{[}clustername\PYG{o}{]}

Kandy\PYG{+w}{ }Kafka

positional\PYG{+w}{ }arguments:
\PYG{+w}{  }clustername\PYG{+w}{  }Cluster\PYG{+w}{ }Name

options:
\PYG{+w}{  }\PYGZhy{}h,\PYG{+w}{ }\PYGZhy{}\PYGZhy{}help\PYG{+w}{   }show\PYG{+w}{ }this\PYG{+w}{ }\PYG{n+nb}{help}\PYG{+w}{ }message\PYG{+w}{ }and\PYG{+w}{ }\PYG{n+nb}{exit}
\PYG{+w}{  }\PYGZhy{}\PYGZhy{}host\PYG{+w}{ }HOST\PYG{+w}{  }Host
\PYG{+w}{  }\PYGZhy{}\PYGZhy{}port\PYG{+w}{ }PORT\PYG{+w}{  }Port
\PYG{l+s+sb}{```}


You need to specify either the \PYGZhy{}\PYGZhy{}host and \PYGZhy{}\PYGZhy{}port arguments or an alias from the configured connection details to run Kandy.

\PYG{g+gu}{\PYGZsh{}\PYGZsh{}\PYGZsh{} Using arguments}
\PYG{l+s+sb}{```bash}
python3\PYG{+w}{ }kandy.py\PYG{+w}{ }\PYGZhy{}\PYGZhy{}host\PYG{+w}{ }localhost\PYG{+w}{ }\PYGZhy{}\PYGZhy{}port\PYG{+w}{ }\PYG{l+m}{29092}
\PYG{l+s+sb}{```}

\PYG{g+gu}{\PYGZsh{}\PYGZsh{}\PYGZsh{} Using alias}
\PYG{l+s+sb}{```bash}
python3\PYG{+w}{ }kandy.py\PYG{+w}{ }default
\PYG{l+s+sb}{```}

\PYG{g+gu}{\PYGZsh{}\PYGZsh{} Testing}
Kandy employs \PYG{l+s+sb}{`pytest`} for testing. All test files are located in the \PYG{l+s+sb}{`tests`} folder. You can run various tests using the provided \PYG{l+s+sb}{`make`} commands:
\PYG{l+s+sb}{```}
\PYG{l+s+sb}{make start\PYGZus{}kafka                    Start local kafka docker}
\PYG{l+s+sb}{make stop\PYGZus{}kafka                     Stop local kafka docker}
\PYG{l+s+sb}{make test\PYGZus{}unit                      Run unit tests}
\PYG{l+s+sb}{make test\PYGZus{}behaviour                 Run behaviour tests}
\PYG{l+s+sb}{make test\PYGZus{}integration               Run integration\PYGZus{}test tests}
\PYG{l+s+sb}{make test                           Run all tests}
\PYG{l+s+sb}{```}

By utilizing these commands, you can ensure that your setup is correct and that Kandy is functioning as expected.

\PYG{g+gu}{\PYGZsh{}\PYGZsh{} Contributing}
Contributions are welcome! If you\PYGZsq{}d like to contribute to this project, please follow these steps:
\PYG{k}{\PYGZhy{}}\PYG{+w}{ }Fork the repository.
\PYG{k}{\PYGZhy{}}\PYG{+w}{ }Create your feature branch: git checkout \PYGZhy{}b feature\PYGZhy{}name.
\PYG{k}{\PYGZhy{}}\PYG{+w}{ }Commit your changes: git commit \PYGZhy{}am \PYGZsq{}Add some feature\PYGZsq{}.
\PYG{k}{\PYGZhy{}}\PYG{+w}{ }Push to the branch: git push origin feature\PYGZhy{}name.
\PYG{k}{\PYGZhy{}}\PYG{+w}{ }Submit a pull request.

\end{Verbatim}
